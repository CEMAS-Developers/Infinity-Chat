{"version":3,"sources":["components/Button.js","config/firebase.js","components/Message.js","components/Channel.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","src","alt","className","width","height","seconds","Channel","user","useState","messages","setMessages","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","message","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","disabled","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","signOut","useAuthState","initializing","setInitializing","setUser","onAuthStateChanged","App","itializing","renderLoading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAIeA,EAJA,SAAC,GAAD,QAAGC,eAAH,MAAa,KAAb,MAAmBC,gBAAnB,MAA8B,KAA9B,SACb,yBAAQD,QAASA,EAAjB,cAA4BC,EAA5B,Q,oCCaFC,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAKT,IAASU,YACdC,EAAqB,IAAIX,IAASY,KAAKC,mB,QCfvCC,EAAa,SAAAC,GACf,IAAIC,EAAgB,GAOpB,OANID,IAGAC,GAFAA,EAAgBC,YAAeF,EAAM,IAAIG,OAGvBC,OAAO,GAAGC,cAAgBJ,EAAcK,MAAM,IAE7DL,GA+BIM,EA5BC,SAAC,GAMV,IAAD,IALFC,iBAKE,MALU,KAKV,MAJFC,YAIE,MAJK,GAIL,MAHFC,mBAGE,MAHY,GAGZ,MAFFC,gBAEE,MAFS,GAET,EACF,OAAKF,EAEG,gCACKE,EACG,qBACAC,IAAKD,EACLE,IAAI,SACJC,UAAU,oBACVC,MAAO,GACPC,OAAQ,KAER,KACHN,EAAc,4BAAIA,IAAmB,MAC5B,OAATF,QAAS,IAATA,OAAA,EAAAA,EAAWS,SACR,+BAAOlB,EAAW,IAAII,KAAyB,IAApBK,EAAUS,YACrC,KACJ,4BAAIR,OAhBE,MC2EPS,EA3FC,SAAC,GAAqB,IAAD,IAAlBC,YAAkB,MAAX,KAAW,IAGHC,mBAAS,IAHN,mBAG5BC,EAH4B,KAGlBC,EAHkB,KAKnCC,qBAAU,WAgBZ,OAfkB7B,EAAG8B,WAAW,YAC3BC,QAAQ,aACRC,MAAM,KAEeC,YAAW,SAAAC,GAEjC,IAAMC,EAAOD,EAAcE,KAAKC,KAAI,SAAAC,GAAG,kCAChCA,EAAIH,QAD4B,IAEnCI,GAAID,EAAIC,QAGZX,EAAYO,QAMX,IAvBgC,IAyB3BK,EAA8Bf,EAA9Be,IAAKxB,EAAyBS,EAAzBT,YAAaC,EAAYQ,EAAZR,SAzBS,EA0BES,mBAAS,IA1BX,mBA0B3Be,EA1B2B,KA0BfC,EA1Be,KAgC7BC,EAAc3C,EAAG8B,WAAW,YAqB9Bc,EAAWC,mBAQb,OAPJhB,qBAAU,WACFe,EAASE,SACTF,EAASE,QAAQC,UAEtB,CAACH,IAII,qCACI,6BACKjB,EAASU,KAAI,SAAAW,GAAO,OACjB,6BACI,cAAC,EAAD,eAAaA,KADRA,EAAQT,SAMzB,uBACIU,SAtCS,SAAAC,GACrBA,EAAEC,iBAEE,IAAMC,EAAiBX,EAAWY,OAC9BD,IACFT,EAAYW,IAAI,CACdvC,KAAMqC,EACNtC,UAAWvB,IAASU,UAAUsD,WAAWC,kBACzChB,MACAxB,cACAC,aAEFyB,EAAc,MAyBZ,UAEQ,uBACAe,IAAKb,EACLc,KAAK,OACLC,MAAOlB,EACPmB,SAlDY,SAACV,GAC7BA,EAAEC,iBACFT,EAAcQ,EAAEW,OAAOF,QAiDPG,YAAa,+BAEb,wBACAJ,KAAK,SACLK,UAAWtB,EAFX,yB,wBCxELuB,EAVO,uCAAG,sBAAAC,EAAA,6DACvB1E,IAASY,OAAO+D,oBADO,kBAIf3E,IAASY,OAAOgE,gBAAgBjE,GAJjB,sDAMrBkE,QAAQC,MAAM,KAAErB,SANK,wDAAH,qDCQPsB,EARF,uCAAG,sBAAAL,EAAA,+EAEN1E,IAASY,OAAOmE,UAFV,sDAIZF,QAAQC,MAAR,MAJY,wDAAH,qDCkBEE,MAlBf,SAAsBpE,GAAO,IAAD,EACcuB,oBAAS,GADvB,mBACnB8C,EADmB,KACLC,EADK,OAEF/C,oBAAS,GAFP,mBAEnBD,EAFmB,KAEbiD,EAFa,KAe1B,OAXA7C,qBAAU,WAQR,OAPmB1B,EAAKwE,oBAAmB,SAAClD,GAChCiD,EAANjD,IACS,GAET+C,GAAcC,GAAgB,QAInC,CAACtE,EAAMqE,IAEH,CAAE/C,OAAM+C,iBCiBFI,MA3Bf,WAAgB,IAAD,EACgBL,EAAahF,IAASY,QAA3CsB,EADK,EACLA,KAAMoD,EADD,EACCA,WAUd,OACE,gCAVoB,WACpB,GAAIA,EACF,OACE,8BACE,+CAOHC,GACArD,EACC,qCACE,cAAC,EAAD,CAAQpC,QAASiF,EAAjB,qBACA,sDACA,cAAC,EAAD,CAAS7C,KAAMA,OAGjB,cAAC,EAAD,CAAQpC,QAAS2E,EAAjB,uCChBOe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4ad2a466.chunk.js","sourcesContent":["const Button = ({ onClick = null, children = null }) => (\r\n  <button onClick={onClick}> {children} </button>\r\n);\r\n\r\nexport default Button;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDpPgzWJT06ypoMdEl5oXWdT7nhiw2TGa8\",\r\n  authDomain: \"react-chat-7aa46.firebaseapp.com\",\r\n  projectId: \"react-chat-7aa46\",\r\n  storageBucket: \"react-chat-7aa46.appspot.com\",\r\n  messagingSenderId: \"587968426449\",\r\n  appId: \"1:587968426449:web:6d2d9fc0c6db589845f0f0\",\r\n  measurementId: \"G-VLKX3JZJ5D\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebase.firestore();\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { db, googleAuthProvider, firebase };\r\n","import { formatRelative } from 'date-fns';\r\n\r\nconst formatDate = date => {\r\n    let formattedDate = '';\r\n    if (date) {\r\n        formattedDate = formatRelative(date, new Date());\r\n\r\n        formattedDate = \r\n            formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n    }\r\n    return formattedDate;\r\n};\r\n\r\nconst Message = ({\r\n    createdAt = null,\r\n    text = '',\r\n    displayName = '',\r\n    photoURL = '',\r\n\r\n}) => {\r\n    if (!text) return null;\r\n        return(\r\n            <div>\r\n                {photoURL ? (\r\n                    <img \r\n                    src={photoURL}\r\n                    alt=\"Avatar\"\r\n                    className=\"rounded-full mr-4\"\r\n                    width={45}\r\n                    height={45}\r\n                    />\r\n                ) : null}\r\n                {displayName ? <p>{displayName}</p> : null}\r\n                {createdAt?.seconds ? (\r\n                    <span>{formatDate(new Date(createdAt.seconds * 1000))}</span>\r\n                ) : null}\r\n                <p>{text}</p>\r\n            </div>\r\n        );;\r\n};\r\n\r\nexport default Message;","import { useEffect, useState, useRef } from \"react\";\r\nimport { db, firebase } from \"../config/firebase\";\r\nimport Message from './Message';\r\n\r\nconst Channel = ({ user = null }) => {\r\n  //console.log(user);\r\n\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const query = db.collection('messages')\r\n    .orderBy('createdAt')\r\n    .limit(100);\r\n\r\nconst unsubscribe = query.onSnapshot(querySnapshot => {\r\n    //Obtiene todos los mensajes desde la bd con su ID.\r\n    const data = querySnapshot.docs.map(doc => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n    }));\r\n    // Actualizo los mensjaes obtenidos desde la bd. \r\n    setMessages(data);\r\n\r\n});\r\n//CleanUp\r\nreturn unsubscribe;\r\n\r\n  }, [])\r\n\r\n  const { uid, displayName, photoURL} = user;\r\n  const [ newMessage, setNewMessage ]= useState('');\r\n  const handleMessageOnChange = (e) =>{\r\n    e.preventDefault();\r\n    setNewMessage(e.target.value);\r\n  }\r\n\r\n  const messagesRef = db.collection('messages');\r\n\r\n  const handleOnSubmit = e =>{\r\n    e.preventDefault();\r\n\r\n        const trimmedMessage = newMessage.trim(); \r\n        if (trimmedMessage) {\r\n          messagesRef.add({\r\n            text: trimmedMessage,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n            uid,\r\n            displayName,\r\n            photoURL,\r\n          });\r\n          setNewMessage('');\r\n        }\r\n      };\r\n  \r\n\r\n  \r\n\r\nconst inputRef = useRef();\r\nuseEffect(() => {\r\n    if (inputRef.current){\r\n        inputRef.current.focus();\r\n    }\r\n}, [inputRef]);\r\n\r\n\r\n    return(\r\n        <>\r\n            <ul>\r\n                {messages.map(message => (\r\n                    <li key={message.id}>\r\n                        <Message {...message} />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <form\r\n                onSubmit={handleOnSubmit}>\r\n                    <input\r\n                    ref={inputRef}\r\n                    type=\"text\"\r\n                    value={newMessage}\r\n                    onChange={handleMessageOnChange}\r\n                    placeholder= \"Escribe tu mensaje aqui...\"\r\n                    />\r\n                    <button \r\n                    type=\"submit\"\r\n                    disabled={!newMessage}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </form>\r\n            </>\r\n    );  \r\n};\r\n\r\nexport default Channel;\r\n\r\n  //const query = db.collection(\"messages\").orderBy(\"createdAt\").limit(100);\r\n\r\n    //const unsubscribe = query.onSnapshot((querySnapshot) => {\r\n //     const data = querySnapshot.docs.map((doc) => ({\r\n //       ...doc.data(),\r\n //       id: doc.id,\r\n //     }));\r\n//\r\n //     setMessages(data);\r\n //   });\r\n//\r\n //   return unsubscribe;\r\n // }, []);\r\n//\r\n // return (\r\n //   <ul>\r\n //     {messages.map((message) => (\r\n //       <li key={message.id}>{message.text}</li>\r\n //     ))}\r\n //   </ul>\r\n // );\r\n//};\r\n//","import { googleAuthProvider, firebase } from \"../config/firebase\";\r\n\r\nconst signInWithGoogle = async () => {\r\n  firebase.auth().useDeviceLanguage();\r\n\r\n  try {\r\n    await firebase.auth().signInWithPopup(googleAuthProvider);\r\n  } catch (e) {\r\n    console.error(e.message);\r\n  }\r\n};\r\n\r\nexport default signInWithGoogle;\r\n","import { firebase } from \"../config/firebase\";\r\n\r\nconst signOut = async () => {\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nexport default signOut;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction useAuthState(auth) {\r\n  const [initializing, setInitializing] = useState(true);\r\n  const [user, setUser] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubcribe = auth.onAuthStateChanged((user) => {\r\n      if (user) setUser(user);\r\n      else setUser(false);\r\n\r\n      if (initializing) setInitializing(false);\r\n    });\r\n\r\n    return unsubcribe;\r\n  }, [auth, initializing]);\r\n\r\n  return { user, initializing };\r\n}\r\n\r\nexport default useAuthState;\r\n","//import { db } from \"./config/firebase\";\r\nimport { Button, Channel } from \"./components/\";\r\nimport { signInWithGoogle, signOut } from \"./login\";\r\nimport { useAuthState } from \"./hooks\";\r\nimport { firebase } from \"./config/firebase\";\r\n//console.log(db);\r\n\r\nfunction App() {\r\n  const { user, itializing } = useAuthState(firebase.auth());\r\n  const renderLoading = () => {\r\n    if (itializing)\r\n      return (\r\n        <div>\r\n          <h3>Loadinng...</h3>\r\n        </div>\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {renderLoading()}\r\n      {user ? (\r\n        <>\r\n          <Button onClick={signOut}> Logout</Button>\r\n          <p> Bienvenidos al CHAT!</p>\r\n          <Channel user={user} />\r\n        </>\r\n      ) : (\r\n        <Button onClick={signInWithGoogle}> Sign in with Google </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}